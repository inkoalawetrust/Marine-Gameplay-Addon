Version "4.12"

//URGENT:
/*Ah fuck, uh, should they actually replace anything by default? Like replacing former humans with weak marines often, and lower chances of replacing stronger demons
like Mancubi? Or only replace the blursphere with beacons by default or something? Maybe I should make a poll on my server about this.*/

//TODO:
//Add options for replacing specific monsters, with marines. With chances from 0-255 instead of bools, for finer control, maybe some presets too.
/*Add an option for locking marine behaviors, behind the difficulty (i.e ITYTD marines are stoopid), and a setting to override map-placed marines too.
Or to only affect pre-placed marines that have no custom user variable values at all.*/
/*Make a beacon teleporter item (With customizable marine amounts and stuff), that when thrown, spawns some amount of friendly marines. Also add settings for which
items it replaces and the chances of it doing so. Also need to handle stuff like crammed spaces with it and shit, maybe like making it so you can pick it up again
if it couldn't teleport all the marines it has "stored".*/
//And option to make marines phase through allies like players, oh, also to make them immune to all friendly damage. And also making them go through monster block lines.
//Add a setting to make the marine that replaces a specific class try to generally conform to its' threat level. i.e zombieman-replacing marines are weak as shit

//IDEA:
//Add a customizable "SpawnMarine" console command/netevent, like for specified marine color, armor, user variables, that stuff.
//For item and monster replacements, try adding some kind of custom field for each for inserting custom classes to replace and the chance of doing so?
//God fucking help me. A way to have MARINES PERSIST ACROSS MAPS?

//#Include "ZScript/Token.zsc" //TODO: Move the SMGameplay_Token I'll likely need there.

Class SMGR_Marine : SM_Marine{}

Class SMGameplay_Handler : EventHandler
{
	//Handle replacing NPCs and shit with marines.
	/*HACK: For fucks sake, there's no way to pass what actor replaced who in CheckReplacement(), so for SMGameplay_Powerscaling to work I need to do shit like make
	Arachnotrons be replaced by a specific SM_Marine child class, so that I can check in CheckReplacee() if THAT stupid hack bastard child is replacing something, to be
	able to properly mark the marine as replacing the Arachnotron. Besides being an awful hack, it also has the fun side effect of making it fucking impossible if I add
	the ability to replace other unsupported NPCs with marines, to have the marines conform to the threat level of who they're replacing.

	So if you got Doomless loaded or something, and want to replace a guy from it with a marine, the marine won't be able to have their abilities and stats adjusted
	to match him.

	UPDATE: Okay, we'll see. Frankly, I might just fucking not add SMGameplay_PowerScaling, at least until I add a passable text field for the replacement system as a PR.
	*/
	Override Void CheckReplacement (ReplaceEvent E)
	{
		Super.CheckReplacement (E);
		
		If (E.Replacee == 'Zombieman' && Random (0,255) < SMGR_Zombieman)
		{
			E.Replacement = "SMGR_Marine";
			E.IsFinal = True; //It's the final countdown, dooodooodooodooo, dooo-
		}
		
		//Item replacements
		If (E.Replacee == 'Chaingun' && Random (0,255) < SMGR_Rifle_Chaingun)
		{
			E.Replacement = "SM_Rifle";
			E.IsFinal = True;
		}
	}
	
	Override Void WorldThingSpawned (WorldEvent E)
	{
		Super.WorldThingSpawned (E);
		If (!E.Thing) Return;
		
		//Give special token to all marines.
		If (E.Thing Is "SM_Marine")
		{
			Inventory Token = Inventory(Actor.Spawn("SMGameplay_Token"));
			If (Token && !(E.Thing Is "SMGR_Marine")) SMGameplay_Token(Token).IsForMapMarine = True; //Non-replacing marines are specially marked.
			
			//NOW, give the item to the marine, now that the variable is set properly.
			Token.CallTryPickup(E.Thing);
		}
	}
	
	//Custom command handling
	Override Void NetworkProcess (ConsoleEvent E)
	{
		If (E.Player < 0 || !PlayerInGame[E.Player] || !Players[E.Player].Mo)
			Return;
		
		Let PlrMo = Players[E.Player].Mo;
		
		Array <String> Command;
		Command.Push (E.Name);
		
		//HACK: We can't fucking update the marine colors through SMGameplay_ChangeMarineColor, too straightforward, NOOOO we have to do all this instead!
		If (Command[0] ~== "SMG_UpdateMarineColor")
		{
			//Find all addon-spawned marines in the map, and update their colors.
			ThinkerIterator MarineSearch = ThinkerIterator.Create("SMGR_Marine");
			SM_Marine Marine;
			While (Marine = SMGR_Marine(MarineSearch.Next()))
			{
				//If (Marine.User_Color ~== "") 
				{
					If (!Marine.bFriendly)
					{
						If (SMGameplay_EnemyMarineColor != "")
							SMGameplay_Token.SetMarineColor (Marine,SMGameplay_EnemyMarineColor);
					}
					Else
					{
						If (SMGameplay_FriendMarineColor != "")
							SMGameplay_Token.SetMarineColor (Marine,SMGameplay_FriendMarineColor);
					}
				}
			}
		}
		//Update if player-aligned addon marines have User_AllyClip on or not.
		Else If (Command[0] ~== "SMG_UpdateMarineClipping")
		{
			ThinkerIterator MarineSearch = ThinkerIterator.Create("SMGR_Marine");
			SM_Marine Marine;
			While (Marine = SMGR_Marine(MarineSearch.Next()))
			{
				If (Marine.bFriendly)
					Marine.User_AllyClip = SMGameplay_FriendClip;
			}
		}
		//Update addon marines to have bottomless magazines or not.
		Else If (Command[0] ~== "SMG_UpdateMarineInfiniteAmmo")
		{
			ThinkerIterator MarineSearch = ThinkerIterator.Create("SMGR_Marine");
			SM_Marine Marine;
			While (Marine = SMGR_Marine(MarineSearch.Next()))
			{
				If (Marine.bFriendly)
					Marine.User_NoReload = SMGameplay_Ally_InfiniteAmmo;
				Else
					Marine.User_NoReload = SMGameplay_Foe_InfiniteAmmo;
			}
		}
	}
}

//Clamp actor replacement values between 0 and 255.
Class SMGameplay_ReplaceClamp : CustomIntCVAR
{
	Override Int ModifyValue (Name CVarName, Int Val)
	{
		if (kai_debugprintmessages) console.printf ("%s value was %d, now it'll be %d",cvarname,val,Clamp (Val,0,255));
		Return Clamp (Val,0,255);
	}
}

//Update all marines to match the color the settings have been set to. Update both the hostile and friendly marine color overrides to not make a second CVAR class.
Class SMGameplay_ChangeMarineColor : CustomStringCVAR
{
	Override String ModifyValue (Name CVarName, String Val)
	{
		//HACK: Can't just call the code this stupid console command runs directly here, because of object scopes.
		SMGameplay_Handler(EventHandler.Find("SMGameplay_Handler")).SendNetworkEvent ("SMG_UpdateMarineColor");
		Return Val;
	}
}

//Update a boolean user variable on the marines.
Class SMGameplay_UpdateMarineBoolVar : CustomBoolCVAR
{
	Override Bool ModifyValue (Name CVarName, Bool Val)
	{
		Let Handler = SMGameplay_Handler(EventHandler.Find("SMGameplay_Handler"));
		If (CVarName == 'SMGameplay_FriendClip')
			Handler.SendNetworkEvent ("SMG_UpdateMarineClipping");
		Else If (CVarName == 'SMGameplay_Ally_InfiniteAmmo' || CVarName == 'SMGameplay_Foe_InfiniteAmmo')
			Handler.SendNetworkEvent ("SMG_UpdateMarineInfiniteAmmo");
		Return Val;
	}
}

//NOTE: We'll need this for shit like making marines immune to friendly damage, maybe even stuff like functioning like an action restrictor and clipping through allies.
Class SMGameplay_Token : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.Untossable;
		+Inventory.NoScreenFlash;
	}
	
	//Actions ALL marines are restricted from performing. Functions as a map-wide action restrictor for marines not already under some restrictors' influence.
	Bool NoCover, NoClimb, NoJump, NoCrouch, NoSwim, NoDodge, NoHeal, NoWarn, NoReloadRun;
	
	Bool IsForMapMarine; //If on, the token is being used by a pre-placed marine, mainly ones added by the map itself. So they won't be affect by certain settings.
	
	Override Void AttachToOwner (Actor Other)
	{
		Super.AttachToOwner (Other);
		
		If (!Other || !(Other Is "SM_Marine"))
		{
			GoAwayAndDie();
			Return;
		}
		
		console.printf ("isformapmarine for %p is set to %d",other,isformapmarine);
		//Nerf marine stats.
		//TODO: Make this overridable by SMGameplay_SkillScaling, also use the greycheck CVAR stuff Agent_Ash added for that.
		If (!IsForMapMarine && SMGameplay_NerfEnemyMarines && !Other.bFriendly || SMGameplay_NerfFriendMarines && Other.bFriendly)
		{
			Other.MaxTargetRange /= 2;
			Other.DamageMultiply /= 2;
			Other.StartHealth /=2;
			Other.Health = Other.StartHealth;
		}
		
		SM_Marine Marine = SM_Marine(Other);
		//Marine color overrides, only override if you're set to do so, and the marine doesn't already have a color, like by being map-placed.
		If (!IsForMapMarine && Marine.User_Color ~== "") 
		{
			If (!Marine.bFriendly)
			{
				If (SMGameplay_EnemyMarineColor != "")
					SetMarineColor (Marine,SMGameplay_EnemyMarineColor);
			}
			Else
			{
				If (SMGameplay_FriendMarineColor != "")
					SetMarineColor (Marine,SMGameplay_FriendMarineColor);
			}
		}
		
		//Set marine bool user vars.
		If (!IsForMapMarine)
		{
			If (Marine.bFriendly)
			{
				Marine.User_AllyClip = SMGameplay_FriendClip;
				Marine.User_NoReload = SMGameplay_Ally_InfiniteAmmo;
			}
			Else
				Marine.User_NoReload = SMGameplay_Foe_InfiniteAmmo;
		}
	}
	
	Static Void SetMarineColor (SM_Marine Marine, String Colour)
	{
		If (!Marine) Return;
		Marine.User_Color = Colour;
		Marine.SM_HandleMarineColoring (Marine.User_Color);
	}
	
	//Bool NoCover, NoClimb, NoJump, NoCrouch, NoSwim, NoDodge, NoHeal, NoWarn, NoReloadRun;
	//Handle restricting specific marine functions as specified in the settings.
	Bool RestrictMarine (SM_Marine Marine)
	{
		If (!Marine)
			Return False;
		//Literally nothing is restricted.
		If (!SMGRestrict_Cover && !SMGRestrict_Climb && !SMGRestrict_Jump && !SMGRestrict_Crouch /*&& !SMGRestrict_Swim*/ && !SMGRestrict_Dodge && !SMGRestrict_Heal &&
		!SMGRestrict_Warn && !SMGRestrict_ReloadRun)
			Return False;
		
		SM_RestrictionToken Restrictor = SM_RestrictionToken(Marine.FindInventory ("SM_RestrictionToken")); //Already have a token.
		If (!Restrictor)
			Restrictor = SM_RestrictionToken(Spawn("SM_RestrictionToken"));
		
		If (Restrictor)
		{
			Restrictor.NoCover		= SMGRestrict_Cover;
			Restrictor.NoClimb		= SMGRestrict_Climb;
			Restrictor.NoJump		= SMGRestrict_Jump;
			Restrictor.NoCrouch		= SMGRestrict_Crouch;
			//Restrictor.NoSwim		= SMGRestrict_Swim;
			Restrictor.NoDodge		= SMGRestrict_Dodge;
			Restrictor.NoHeal		= SMGRestrict_Heal;
			Restrictor.NoWarn		= SMGRestrict_Warn;
			Restrictor.NoReloadRun	= SMGRestrict_ReloadRun; //IDEA: Replace this with a slider that modifies the retreat factor user var instead?
			console.printf ("gameplay addon is restricting marine.");
			Restrictor.MaxTargetRange = -1; //No range needed, this is map wide.
		}
		Restrictor.CallTryPickup (Marine); //Pick up the token
		Return True;
	}
	
	Override Void ModifyDamage (Int Damage, Name DamageType, Out Int NewDamage, Bool Passive, Actor Inflictor, Actor Source, Int Flags)
	{
		If (Owner && !Owner.bFriendly)
			Return;
		
		//Scale the friendly fire damage friendly marines receive from ally.
		If (Passive && Damage > 0 && Source && (Source.Player || Source.bFriendly))
			NewDamage *= SMGameplay_FriendDamageMul;
	}
	
	Override Void DoEffect()
	{
		//NOTE: Ran before ticking in vain hope of maybe not triggering a timing bug where the restrict token is given AFTER the marine has done the restricted action.
		RestrictMarine (SM_Marine(Owner)); //Run token restrictions.
		Super.DoEffect();
	}
	
	
}