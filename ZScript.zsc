Version "4.12"

//URGENT:
/*Ah fuck, uh, should they actually replace anything by default? Like replacing former humans with weak marines often, and lower chances of replacing stronger demons
like Mancubi? Or only replace the blursphere with beacons by default or something? Maybe I should make a poll on my server about this.*/

//TODO:
//Add options for replacing specific monsters, with marines. With chances from 0-255 instead of bools, for finer control, maybe some presets too.
//Add options for nerfing enemy and friendly marines separetely.
/*Add an option for locking marine behaviors, behind the difficulty (i.e ITYTD marines are stoopid), and a setting to override map-placed marines too.
Or to only affect pre-placed marines that have no custom user variable values at all.*/
/*Make a beacon teleporter item (With customizable marine amounts and stuff), that when thrown, spawns some amount of friendly marines. Also add settings for which
items it replaces and the chances of it doing so. Also need to handle stuff like crammed spaces with it and shit, maybe like making it so you can pick it up again
if it couldn't teleport all the marines it has "stored".*/
//And option to make marines phase through allies like players, oh, also to make them immune to all friendly damage. And also making them go through monster block lines.
//Add a setting to make the marine that replaces a specific class try to generally conform to its' threat level. i.e zombieman-replacing marines are weak as shit
//Add a setting to have a chance of replacing the chaingun with the marines' rifle.

//IDEA:
//Add a customizable "SpawnMarine" console command/netevent, like for specified marine color, armor, user variables, that stuff.
//For item and monster replacements, try adding some kind of custom field for each for insert custom classes to replace and the chance of doing so?
//God fucking help me. A way to have MARINES PERSIST ACROSS MAPS?

//#Include "ZScript/Token.zsc" //TODO: Move the SMGameplay_Token I'll likely need there.

/*HACK: For fucks sake, there's no way to pass what actor replaced who in CheckReplacement(), so for SMGameplay_Powerscaling to work I need to do shit like make
Arachnotrons be replaced by a specific SM_Marine child class, so that I can check in CheckReplacee() if THAT stupid hack bastard child is replacing something, to be
able to properly mark the marine as replacing the Arachnotron. Besides being an awful hack, it also has the fun side effect of making it fucking impossible if I add
the ability to replace other unsupported NPCs with marines, to have the marines conform to the threat level of who they're replacing.

So if you got Doomless loaded or something, and want to replace a guy from it with a marine, the marine won't be able to have their abilities and stats adjusted
to match him.

UPDATE: Okay, we'll see. Frankly, I might just fucking not add SMGameplay_PowerScaling, at least I add a passable text field for the replacement system as a PR.
*/
Class SMGR_Marine : SM_Marine{}

Class SMGameplay_Handler : EventHandler
{
	//Handle replacing NPCs and shit with marines.
	Override Void CheckReplacement (ReplaceEvent E)
	{
		Super.CheckReplacement (E);
		
		If (E.Replacee == 'Zombieman' && Random (0,255) < SMGR_Zombieman)
		{
			E.Replacement = "SMGR_Marine";
			E.IsFinal = True; //It's the final countdown, dooodooodooodooo, dooo-
		}
		
		//Item replacements
		If (E.Replacee == 'Chaingun' && Random (0,255) < SMGR_Rifle_Chaingun)
		{
			E.Replacement = "SM_Rifle";
			E.IsFinal = True;
		}
	}
	
	Override Void WorldThingSpawned (WorldEvent E)
	{
		Super.WorldThingSpawned (E);
		
		If (E.Thing && E.Thing Is "SMGR_Marine")
		{
			E.Thing.GiveInventoryType ("SMGameplay_Token");
			string wordy = E.Thing.GetReplacee(E.Thing.GetClass()).GetClassName();
			if (kai_debugprintmessages) console.printf ("%s was replaced by a marine, e.thing class is %s",wordy,E.Thing.GetClassname());
		}
	}
}

//Clamp actor replacement values between 0 and 255.
Class SMGameplay_ReplaceClamp : CustomIntCVAR
{
	Override Int ModifyValue (Name CVarName, Int Val)
	{
		if (kai_debugprintmessages) console.printf ("%s value was %d, now it'll be %d",cvarname,val,Clamp (Val,0,255));
		Return Clamp (Val,0,255);
	}
}

//NOTE: We'll need this for shit like making marines immune to friendly damage, maybe even stuff like functioning like an action restrictor and clipping through allies.
Class SMGameplay_Token : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.Untossable;
		+Inventory.NoScreenFlash;
	}
	
	Override Void AttachToOwner (Actor Other)
	{
		Super.AttachToOwner (Other);
		
		If (!Other || !(Other Is "SM_Marine"))
		{
			GoAwayAndDie();
			Return;
		}
		
		//Nerf marine stats.
		//TODO: Make this overridable by SMGameplay_SkillScaling, also use the greycheck CVAR stuff Agent_Ash added for that.
		If (SMGameplay_NerfEnemyMarines && !Other.bFriendly || SMGameplay_NerfFriendMarines && Other.bFriendly)
		{
			Other.MaxTargetRange /= 2;
			Other.DamageMultiply /= 2;
			Other.StartHealth /=2;
			Other.Health = Other.StartHealth;
		}
		
		SM_Marine Marine = SM_Marine(Other);
		//Marine color overrides, only override if you're set to do so, and the marine doesn't already have a color, like by being map-placed.
		If (Marine.User_Color ~== "") 
		{
			If (!Marine.bFriendly)
			{
				If (SMGameplay_EnemyMarineColor != "")
					SetMarineColor (Marine,SMGameplay_EnemyMarineColor);
			}
			Else
			{
				If (SMGameplay_FriendMarineColor != "")
					SetMarineColor (Marine,SMGameplay_FriendMarineColor);
			}
		}
	}
	
	Void SetMarineColor (SM_Marine Marine, String Colour)
	{
		If (!Marine) Return;
		Marine.User_Color = Colour;
		Marine.SM_HandleMarineColoring (Marine.User_Color);
	}
	
	//Override Void ModifyDamage (Int Damage, Name DamageType, Out Int NewDamage, Bool Passive, Actor Inflictor, Actor Source, Int Flags)
	//{
		
	//}
	
	Override Void DoEffect()
	{
		Super.DoEffect();
	}
	
	
}