Version "4.12"

//TODO:
//Add options for replacing specific monsters, with marines. With chances from 0-255 instead of bools, for finer control, maybe some presets too.
/*Make a beacon teleporter item (With customizable marine amounts and stuff), that when thrown, spawns some amount of friendly marines. Also add settings for which
items it replaces and the chances of it doing so. Also need to handle stuff like crammed spaces with it and shit, maybe like making it so you can pick it up again
if it couldn't teleport all the marines it has "stored".*/
//Add a setting to make the marine that replaces a specific class try to generally conform to its' threat level. i.e zombieman-replacing marines are weak as shit

//IDEA:
//For item and monster replacements, try adding some kind of custom field for each for inserting custom classes to replace and the chance of doing so?
//God fucking help me. A way to have MARINES PERSIST ACROSS MAPS?

Class SMGR_Marine : SM_Marine{}

Class SMGameplay_Handler : EventHandler
{
	//Handle replacing NPCs and shit with marines.
	/*HACK: For fucks sake, there's no way to pass what actor replaced who in CheckReplacement(), so for SMGameplay_Powerscaling to work I need to do shit like make
	Arachnotrons be replaced by a specific SM_Marine child class, so that I can check in CheckReplacee() if THAT stupid hack bastard child is replacing something, to be
	able to properly mark the marine as replacing the Arachnotron. Besides being an awful hack, it also has the fun side effect of making it fucking impossible if I add
	the ability to replace other unsupported NPCs with marines, to have the marines conform to the threat level of who they're replacing.

	So if you got Doomless loaded or something, and want to replace a guy from it with a marine, the marine won't be able to have their abilities and stats adjusted
	to match him.

	UPDATE: Okay, we'll see. Frankly, I might just fucking not add SMGameplay_PowerScaling, at least until I add a passable text field for the replacement system as a PR.
	*/
	Override Void CheckReplacement (ReplaceEvent E)
	{
		Super.CheckReplacement (E);
		
		If (E.Replacee == 'Zombieman' && Random (0,255) < SMGR_Zombieman)
		{
			E.Replacement = "SMGR_Marine";
			E.IsFinal = True; //It's the final countdown, dooodooodooodooo, dooo-
		}
		
		//Item replacements
		If (E.Replacee == 'Chaingun' && Random (0,255) < SMGR_Rifle_Chaingun)
		{
			E.Replacement = "SM_Rifle";
			E.IsFinal = True;
		}
	}
	
	Override Void WorldThingSpawned (WorldEvent E)
	{
		Super.WorldThingSpawned (E);
		If (!E.Thing) Return;
		
		//Give special token to all marines.
		If (E.Thing Is "SM_Marine")
		{
			Inventory Token = Inventory(Actor.Spawn("SMGameplay_Token"));
			If (Token && !(E.Thing Is "SMGR_Marine")) SMGameplay_Token(Token).IsForMapMarine = True; //Non-replacing marines are specially marked.
			
			//NOW, give the item to the marine, now that the variable is set properly.
			Token.CallTryPickup(E.Thing);
		}
	}
	
	//Custom command handling
	Override Void NetworkProcess (ConsoleEvent E)
	{
		If (E.Player < 0 || !PlayerInGame[E.Player] || !Players[E.Player].Mo)
			Return;
		
		Let PlrMo = Players[E.Player].Mo;
		
		Array <String> Command;
		E.Name.Split (Command, ":");
		
		//Command that spawns a marine, with simplistic parameters.
		//Parameters: Friendliness, Armor Class, Skill Level, Color
		If (Command[0] ~== "SM_SpawnMarine")
		{console.printf ("command string %s",e.name);
			Vector3 SpawnPos = PlrMo.Vec3Angle (64,PlrMo.Angle); //64MU in front of the player.
			SM_Marine Marine = SM_Marine(Actor.Spawn("SMGR_Marine",SpawnPos));
			Marine.Angle = PlrMo.Angle;
			
			If (Marine)
			{
				If (Command.Size() > 1 && Command[1] ~== "Friend") //If the first parameter after the command name is "friend", the marine is supposed to be friendly.
				{
					Marine.bFriendly = True;
					Marine.SetFriendPlayer(PlrMo.Player);
				}
				
				If (Command.Size() > 3 && !(Command[3] ~== "Map") && !(Command[3] ~== "")) //Set marine skill level override if this isn't just "Map", simpler than making EVERY OPTION CUSTOMIZABLE THROUGH THIS COMMAND!
				{
					If (Command[3] ~== "VeryEasy")
						SMGameplay_Token.SetMarineDifficulty (Marine,1);
					Else If (Command[3] ~== "Easy")
						SMGameplay_Token.SetMarineDifficulty (Marine,2);
					Else If (Command[3] ~== "Normal")
						SMGameplay_Token.SetMarineDifficulty (Marine,4);
					Else If (Command[3] ~== "Hard")
						SMGameplay_Token.SetMarineDifficulty (Marine,8);
					Else If (Command[3] ~== "VeryHard")
						SMGameplay_Token.SetMarineDifficulty (Marine,16);
				}
				
				//Give marine a specific armor, if any.
				If (Command.Size() > 2 && !(Command[2] ~== "None") && !(Command[2] ~== ""))
				{
					Marine.RemoveInventory (Marine.FindInventory("BasicArmor")); //Remove existing armor set by the skill level.
					Marine.GiveInventory (Command[2],1);
				}
				
				//Set marine color.
				If (Command.Size() > 4 && !(Command[4] ~== "Default") && !(Command[4] ~== ""))
					SMGameplay_Token.SetMarineColor (Marine,Command[4]);
			}
		}
		//Print info about each addon command, if I add any more of them anyway lol.
		Else If (Command[0] ~== "SMGR_Help")
		{
			If (Command.Size() > 1 && !(Command[1] ~== ""))
			{
				If (Command[1] ~== "SM_SpawnMarine")
				{
					Console.Printf ("\c[Green] SM_SpawnMarine: Spawns a standard smart marine.");
					Console.Printf ("\c[Green] Parameters:");
					Console.Printf ("\c[Green] 		Friendliness: Are they friendly? If you type \"friend\" it'll be so, if you type \"foe\" or anything else, an enemy marine spawns.");
					Console.Printf ("\c[Green] 		Armor Class: What armor class does the marine wear? Any armor class is valid. Type \"none\" to have them use the default armor for their' skill level.");
					Console.Printf ("\c[Green] 		Skill level: The approximate skill/difficulty level of the marine as described in the difficulty options, available skills: VeryEasy, Easy, Normal, Hard, VeryHard");
					Console.Printf ("\c[Green] 		Color: The color of the marines' armor, available colors: Red, Gray, White, Black, Blue, Yellow, Orange, Pink, DarkGreen, DarkRed, Random, Default");
					Console.Printf ("\c[Red] NOTE: All parameters must be in the exact order above, make sure to enter ALL parameters or else you may encounter bugs!");
				}
				Else
					Console.Printf ("\c[Red] Invalid help command name.");
			}
			Else
			{
				Console.Printf ("\c[Green] Available commands: SM_SpawnMarine");
			}
		}
		
		//HACK: We can't fucking update the marine colors through SMGameplay_ChangeMarineColor, too straightforward, NOOOO we have to do all this instead!
		If (E.Name ~== "SMG_UpdateMarineColor")
		{
			//Find all addon-spawned marines in the map, and update their colors.
			ThinkerIterator MarineSearch = ThinkerIterator.Create("SMGR_Marine");
			SM_Marine Marine;
			While (Marine = SMGR_Marine(MarineSearch.Next()))
			{
				//If (Marine.User_Color ~== "") 
				{
					If (!Marine.bFriendly)
					{
						If (SMGameplay_EnemyMarineColor != "")
							SMGameplay_Token.SetMarineColor (Marine,SMGameplay_EnemyMarineColor);
					}
					Else
					{
						If (SMGameplay_FriendMarineColor != "")
							SMGameplay_Token.SetMarineColor (Marine,SMGameplay_FriendMarineColor);
					}
				}
			}
		}
		//Update if player-aligned addon marines have User_AllyClip on or not.
		Else If (E.Name ~== "SMG_UpdateMarineClipping")
		{
			ThinkerIterator MarineSearch = ThinkerIterator.Create("SMGR_Marine");
			SM_Marine Marine;
			While (Marine = SMGR_Marine(MarineSearch.Next()))
			{
				If (Marine.bFriendly)
					Marine.User_AllyClip = SMGameplay_FriendClip;
			}
		}
		//Update addon marines to have bottomless magazines or not.
		Else If (E.Name ~== "SMG_UpdateMarineInfiniteAmmo")
		{
			ThinkerIterator MarineSearch = ThinkerIterator.Create("SMGR_Marine");
			SM_Marine Marine;
			While (Marine = SMGR_Marine(MarineSearch.Next()))
			{
				If (Marine.bFriendly)
					Marine.User_NoReload = SMGameplay_Ally_InfiniteAmmo;
				Else
					Marine.User_NoReload = SMGameplay_Foe_InfiniteAmmo;
			}
		}
	}
}

//Clamp actor replacement values between 0 and 255.
Class SMGameplay_ReplaceClamp : CustomIntCVAR
{
	Override Int ModifyValue (Name CVarName, Int Val)
	{
		if (kai_debugprintmessages) console.printf ("%s value was %d, now it'll be %d",cvarname,val,Clamp (Val,0,255));
		Return Clamp (Val,0,255);
	}
}

//Update all marines to match the color the settings have been set to. Update both the hostile and friendly marine color overrides to not make a second CVAR class.
Class SMGameplay_ChangeMarineColor : CustomStringCVAR
{
	Override String ModifyValue (Name CVarName, String Val)
	{
		//HACK: Can't just call the code this stupid console command runs directly here, because of object scopes.
		SMGameplay_Handler(EventHandler.Find("SMGameplay_Handler")).SendNetworkEvent ("SMG_UpdateMarineColor");
		Return Val;
	}
}

//Update a boolean user variable on the marines.
Class SMGameplay_UpdateMarineBoolVar : CustomBoolCVAR
{
	Override Bool ModifyValue (Name CVarName, Bool Val)
	{
		Let Handler = SMGameplay_Handler(EventHandler.Find("SMGameplay_Handler"));
		If (CVarName == 'SMGameplay_FriendClip')
			Handler.SendNetworkEvent ("SMG_UpdateMarineClipping");
		Else If (CVarName == 'SMGameplay_Ally_InfiniteAmmo' || CVarName == 'SMGameplay_Foe_InfiniteAmmo')
			Handler.SendNetworkEvent ("SMG_UpdateMarineInfiniteAmmo");
		Return Val;
	}
}

//NOTE: We'll need this for shit like making marines immune to friendly damage, maybe even stuff like functioning like an action restrictor and clipping through allies.
Class SMGameplay_Token : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		+Inventory.Undroppable;
		+Inventory.Unclearable;
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.Untossable;
		+Inventory.NoScreenFlash;
	}
	
	//Actions ALL marines are restricted from performing. Functions as a map-wide action restrictor for marines not already under some restrictors' influence.
	Bool NoCover, NoClimb, NoJump, NoCrouch, NoSwim, NoDodge, NoHeal, NoWarn, NoReloadRun;
	
	Bool IsForMapMarine; //If on, the token is being used by a pre-placed marine, mainly ones added by the map itself. So they won't be affect by certain settings.
	
	Override Void AttachToOwner (Actor Other)
	{
		Super.AttachToOwner (Other);
		
		If (!Other || !(Other Is "SM_Marine"))
		{
			GoAwayAndDie();
			Return;
		}
		
		console.printf ("isformapmarine for %p is set to %d",other,isformapmarine);
		//Nerf marine stats.
		If (!IsForMapMarine && !SMGameplay_SkillScaling)
		{
			If (SMGameplay_NerfEnemyMarines && !Other.bFriendly || SMGameplay_NerfFriendMarines && Other.bFriendly)
			{
				Other.MaxTargetRange /= 2;
				Other.DamageMultiply /= 2;
				Other.StartHealth /= 2;
				Other.Health = Other.StartHealth;
			}
		}
		
		SM_Marine Marine = SM_Marine(Other);
		//Alter marine abilities (Using their user vars) based on the maps' skill level (Well, the skill FILTER more specifically, for universal-ish skill checks).
		If (!IsForMapMarine && SMGameplay_SkillScaling)
		{
			Int SkillFilter = (SMGameplay_SkillFilter == 0) ? G_SkillPropertyInt (SKILLP_SPAWNFILTER) : SMGameplay_SkillFilter;
			SetMarineDifficulty(Marine, SkillFilter);
		}
		
		//Marine color overrides, only override if you're set to do so, and the marine doesn't already have a color, like by being map-placed.
		If (!IsForMapMarine && Marine.User_Color ~== "") 
		{
			If (!Marine.bFriendly)
			{
				If (SMGameplay_EnemyMarineColor != "")
					SetMarineColor (Marine,SMGameplay_EnemyMarineColor);
			}
			Else
			{
				If (SMGameplay_FriendMarineColor != "")
					SetMarineColor (Marine,SMGameplay_FriendMarineColor);
			}
		}
		
		//Set marine bool user vars.
		If (!IsForMapMarine)
		{
			If (Marine.bFriendly)
			{
				Marine.User_AllyClip = SMGameplay_FriendClip;
				Marine.User_NoReload = SMGameplay_Ally_InfiniteAmmo;
			}
			Else
				Marine.User_NoReload = SMGameplay_Foe_InfiniteAmmo;
		}
	}
	
	Static Void SetMarineColor (SM_Marine Marine, String Colour)
	{
		If (!Marine) Return;
		Marine.User_Color = Colour;
		Marine.SM_HandleMarineColoring (Marine.User_Color);
	}
	
	Static Void SetMarineDifficulty (SM_Marine Marine, Int SkillFilter)
	{console.printf ("skill issue filter is %d",skillfilter);
		Switch (SkillFilter)
		{
			Case 1: //Skill issue.
				Marine.RemoveInventory (Marine.FindInventory("BasicArmor")); //Naked marines.
				If (Marine.StartHealth >= 50) Marine.StartHealth = Marine.Health /= 2; //Fragile marines.
				Marine.DamageMultiply = 0.5; //Crap damage
				Marine.MaxTargetRange *= 0.5; //Myopic marines.
				Marine.ThreatLevel = KAI_Actor.THREAT_LOW;
				
				Marine.User_NoParkour = Marine.User_NoCover = True; //Fat and stupid marines.
				Marine.User_DodgeRange = -1; //Slowpoke marines.
				Marine.User_TurretDelay = -1; //Peashooter only marines.
				Marine.User_HealCooldown = Marine.User_GrenadeThreshold = Marine.User_AlertRange = -1; //Inept marines.
				Break;
			Case 2: //TOO EASY, PIECE OF CAKE!
				Marine.TakeInventory ("BasicArmor",50); //Half armor
				If (Marine.StartHealth >= 75) Marine.StartHealth = Marine.Health *= 0.75; //Weaker marines.
				Marine.DamageMultiply = 0.75; //Less damage.
				Marine.MaxTargetRange *= 0.75; //Needs prescription glasses.
				Marine.ThreatLevel = KAI_Actor.THREAT_MILD;
				
				Marine.User_NoParkour = Marine.User_NoCover = True; //Fat and stupid marines.
				Marine.User_DodgeRange = 128; //Bad dodging.
				Marine.User_TurretDelay = -1; //Peashooter only marines.
				Marine.User_HealCooldown = -1; //No healing.
				Marine.User_GrenadeThreshold = 192; //Squamish about grenades.
				Marine.User_AlertRange = -1; //No alerting.
				Break;
			Case 4: //Normal difficulty
				Marine.TakeInventory ("BasicArmor",25); //Most of the normal green armor.
				Marine.DamageMultiply = 0.75; //Less damage.
				Marine.ThreatLevel = KAI_Actor.THREAT_NORMAL;
				
				Marine.User_NoParkour = True; //Can't parkour, but they CAN take cover.
				Marine.User_DodgeRange = 256; //Better dodging.
				Marine.User_TurretDelay = 16*GameTicRate; //Uses turrets, but takes twice as long to go back to them.
				Marine.User_HealCooldown = 80; //Rare healing.
				Marine.User_GrenadeThreshold = 128; //Somewhat likely to throw grenades.
				Marine.User_AlertRange = 256; //Short range alerts.
				Break;
			Case 8: //TRVE COMMUNITY APPROVED™ NORMAL DIFFICULTY
				//Just normal marines lol.
				Break;
			//MAYDO: Have special handling for nightmare that replaces marines with SM_GigaMarine instead.
			Case 16: //AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				Marine.ThreatLevel = KAI_Actor.THREAT_DANGEROUS;
				Marine.bAlwaysFast = True;
				Marine.RemoveInventory (Marine.FindInventory("BasicArmor"));
				Marine.GiveInventory ("BlueArmor",1);
				Marine.GiveInventory ("PowerStrength",1);
				Marine.GiveInventory ("PowerLightAmp",1);
				Marine.Health = 200;
				Marine.Scale.X = Marine.Default.Scale.X * 1.05;
				Marine.Scale.Y = Marine.Default.Scale.Y * 1.10;
				Marine.StartHealth = 110;
				Marine.Health += 10;
				Marine.User_GrenadeThreshold = 88; //Extra likely to use grenades.
				Marine.User_HealCooldown = 10; //Heals allies fast.
				Break;
			Default:
				Break;
		}
	}
	
	//Bool NoCover, NoClimb, NoJump, NoCrouch, NoSwim, NoDodge, NoHeal, NoWarn, NoReloadRun;
	//Handle restricting specific marine functions as specified in the settings.
	Bool RestrictMarine (SM_Marine Marine)
	{
		If (!Marine)
			Return False;
		//Literally nothing is restricted.
		If (!SMGRestrict_Cover && !SMGRestrict_Climb && !SMGRestrict_Jump && !SMGRestrict_Crouch /*&& !SMGRestrict_Swim*/ && !SMGRestrict_Dodge && !SMGRestrict_Heal &&
		!SMGRestrict_Warn && !SMGRestrict_ReloadRun)
			Return False;
		
		SM_RestrictionToken Restrictor = SM_RestrictionToken(Marine.FindInventory ("SM_RestrictionToken")); //Already have a token.
		If (!Restrictor)
			Restrictor = SM_RestrictionToken(Spawn("SM_RestrictionToken"));
		
		If (Restrictor)
		{
			Restrictor.NoCover		= SMGRestrict_Cover;
			Restrictor.NoClimb		= SMGRestrict_Climb;
			Restrictor.NoJump		= SMGRestrict_Jump;
			Restrictor.NoCrouch		= SMGRestrict_Crouch;
			//Restrictor.NoSwim		= SMGRestrict_Swim;
			Restrictor.NoDodge		= SMGRestrict_Dodge;
			Restrictor.NoHeal		= SMGRestrict_Heal;
			Restrictor.NoWarn		= SMGRestrict_Warn;
			Restrictor.NoReloadRun	= SMGRestrict_ReloadRun; //IDEA: Replace this with a slider that modifies the retreat factor user var instead?
			Restrictor.NoEmplacements=SMGRestrict_Emplacements;
			console.printf ("gameplay addon is restricting marine.");
			Restrictor.MaxTargetRange = -1; //No range needed, this is map wide.
		}
		Restrictor.CallTryPickup (Marine); //Pick up the token
		Return True;
	}
	
	Override Void ModifyDamage (Int Damage, Name DamageType, Out Int NewDamage, Bool Passive, Actor Inflictor, Actor Source, Int Flags)
	{
		If (Owner && !Owner.bFriendly)
			Return;
		
		//Scale the friendly fire damage friendly marines receive from ally.
		If (Passive && Damage > 0 && Source && (Source.Player || Source.bFriendly))
			NewDamage *= SMGameplay_FriendDamageMul;
	}
	
	Override Void DoEffect()
	{
		//NOTE: Ran before ticking in vain hope of maybe not triggering a timing bug where the restrict token is given AFTER the marine has done the restricted action.
		RestrictMarine (SM_Marine(Owner)); //Run token restrictions.
		Super.DoEffect();
	}
}

//The beacon in the players' inventory, one time use for each one only.
Class SMGR_BeaconItem : Inventory
{
	Default
	{
		//$Title Marine Reinforcement Beacon
		//$Category Powerups
		//$NotAngled
		Tag "Marine Reinforcement Beacon";
		Inventory.MaxAmount 10;
		Inventory.Amount 1;
		Inventory.Icon "BEACA0";
		+Inventory.HubPower;
		+Inventory.PersistentPower;
		+Inventory.InvBar;
	}
	
	Override Bool Use (Bool Pickup)
	{
		If (Owner)
		{
			Actor Beacon = Spawn ("SMGR_Beacon",Owner.Pos.PlusZ(Owner.Height/2),ALLOW_REPLACE);
			
			If (Beacon)
			{
				Beacon.Vel3DFromAngle (16,Owner.Angle,Owner.Pitch); //Launch in the facing direction.
				Beacon.Master = Owner;
				Owner.TakeInventory (GetClass(),1); //Used up
			}
		}
		Return Super.Use(Pickup);
	}
	
	States
	{
		Spawn:
			BEAC D -1;
			Stop;
	}
}

//The actual beacon item that spawns an amount of marines determined in the settings.
Class SMGR_Beacon : Actor
{
	Default
	{
		Radius 4;
		Height 24;
		-NoGravity;
	}
	
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		Marines = 3; //PLACEHOLDER, REPLACE WITH CVAR!
		BeepGlow.Color1 = "Red";
		//BeepGlow.Texture.SetNull();
		BeepGlow.Flags = SPF_FULLBRIGHT;
		BeepGlow.Style = STYLE_ADD;
		BeepGlow.LifeTime = 8;
		BeepGlow.Size = 24;
		BeepGlow.StartAlpha = 1.0;
	}
	
	UInt Marines; //How many marines to spawn.
	FSpawnParticleParams BeepGlow; //Red glow particle.
	
	//Beep boop maggot *teleports behind you*.
	Void A_BeaconBeep()
	{
		A_StartSound ("SMGameplay/Beacon",attenuation:ATTN_STATIC);
		BeepGlow.Pos = Vec3Offset (0,0,30);
		Level.SpawnParticle(BeepGlow);
	}
	
	States
	{
		//Beacon thrown, wait to fall to the ground.
		//NOTE: Don't bother accounting for the beacon somehow ending up in the air again.
		Spawn:
			BEAC D 1
			{
				If (FloorZ >= Pos.Z)
				{
					A_Stop();
					Return FindState("Activate");
				}
				
				Return State (Null);
			}
			Loop;
		//ERECTIN' A BEACON.
		Activate:
			BEAC DCB 8;
			Goto Land;
		//Beacon is latched to the ground, start teleporting however many marines in.
		Land:
			BEAC A 35;
			BEAC A 0 A_BeaconBeep();
			BEAC A 30;
			BEAC A 0 A_BeaconBeep();
			BEAC A 25;
			BEAC A 0 A_BeaconBeep();
			BEAC A 20;
			BEAC A 0 A_BeaconBeep();
			BEAC A 15;
			BEAC A 0 A_BeaconBeep();
			BEAC A 10;
			BEAC A 0 A_BeaconBeep();
			BEAC A 5;
			BEAC A 0 A_BeaconBeep();
			//Spawn addon marine in. Immediately starts following you and is assigned to a squad with you.
			BEAC A 0
			{
				SM_Marine Marine = SM_Marine(Spawn("SMGR_Marine",Pos,ALLOW_REPLACE));
				If (Marine)
				{
					If (Master) Marine.CopyFriendliness (Master,False);
					Else Marine.CopyFriendliness (Self,False);
					Marine.Angle = Random (0,36)*10;
					Spawn (Marine.TeleFogDestType,Marine.Pos,ALLOW_REPLACE); //Spawn marines' destination fog, they do "teleport" in, after all.
					If (Master) Marine.SetNPCOrder(Marine.ORDER_FOLLOW,False,Master); //Marine immediately starts following the player and is assigned to their group, as is normal marine behavior.
					Else Marine.SetNPCOrder(Marine.ORDER_WANDER); //Fallback
					Marines--; //Spawned one marine.
				}
			}
			TNT1 A 0 A_JumpIf (Marines <= 0,"Deactivate"); //All marines spawned.
			Loop;
		//IDEA: Make sprite edits for the antenna folding back in once done?
		//Cave Johnson, we're done here.
		Deactivate:
			BEAC A 35;
			TNT1 A 0 A_StartSound ("SMGameplay/Beacon",attenuation:ATTN_STATIC,pitch:0.2);
			BEAC BCD 16;
			BEAC D -1;
			Stop;
	}
}